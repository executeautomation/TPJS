"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const sleep_promise_1 = __importDefault(require("sleep-promise"));
const logger_1 = __importDefault(require("../logger/logger"));
const seleniumHelper_1 = require("../sdk/internal/helpers/seleniumHelper");
function HandleSleep(sleep_timing_type, sleep_time, command, step_executed = false) {
    return __awaiter(this, void 0, void 0, function* () {
        if (command.getName() === seleniumHelper_1.SeleniumCommandName.QUIT) {
            return;
        }
        if (sleep_timing_type !== 0) {
            const sleepTimingTypeCondition = step_executed ? 3 : 2;
            if (sleep_timing_type === sleepTimingTypeCondition) {
                logger_1.default.debug(`Step is designed to sleep for ${sleep_time} milliseconds`);
                logger_1.default.debug(`${sleep_timing_type} execution.`);
                yield sleep_promise_1.default(sleep_time);
            }
        }
    });
}
exports.default = HandleSleep;
