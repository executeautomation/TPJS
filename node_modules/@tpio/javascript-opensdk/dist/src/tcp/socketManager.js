"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const net_1 = require("net");
const logger_1 = __importDefault(require("../logger/logger"));
class SocketManager {
    static instance() {
        if (!SocketManager.currInstance) {
            SocketManager.currInstance = new SocketManager();
        }
        return SocketManager.currInstance;
    }
    openSocket(socketAddress, socketPort) {
        if (this.socket) {
            logger_1.default.debug('OpenSocket(): Socket already exists');
            return;
        }
        if (this.isConnected()) {
            logger_1.default.debug('open_socket(): Socket is already connected');
            return;
        }
        this.socket = new net_1.Socket();
        const socketOptions = {
            host: socketAddress,
            port: socketPort,
        };
        this.socket
            .connect(socketOptions, () => {
            if (!this.isConnected()) {
                throw new Error('Failed connecting to Agent socket');
            }
            logger_1.default.debug(`Socket connection to ${socketAddress}:${socketPort} established successfully`);
        })
            .on('error', (res) => {
            logger_1.default.error(`Socket Connection Failed! message:${res.message}`);
            throw new Error(res.message);
        });
    }
    isConnected() {
        if (!this.socket) {
            return false;
        }
        try {
            this.socket.write('test');
            return true;
        }
        catch (error) {
            logger_1.default.error(`Socket not connected: ${error instanceof Error ? error.message : ''}`);
            return false;
        }
    }
    closeSocket() {
        var _a, _b;
        if (this.isConnected()) {
            (_a = this.socket) === null || _a === void 0 ? void 0 : _a.destroy();
            if (!((_b = this.socket) === null || _b === void 0 ? void 0 : _b.destroyed)) {
                logger_1.default.error('Failed to close socket connection to Agent');
                return;
            }
            this.socket = undefined;
        }
    }
}
exports.default = SocketManager;
