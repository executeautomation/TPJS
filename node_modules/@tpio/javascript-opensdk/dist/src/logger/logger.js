"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const stack_trace_1 = __importDefault(require("stack-trace"));
const customFormat = winston_1.format.printf((msg) => {
    let fileMeta = '';
    stack_trace_1.default.get().every((element) => {
        var _a, _b;
        if (((_a = element.getFileName()) === null || _a === void 0 ? void 0 : _a.includes('javascript-opensdk/dist/src')) &&
            !((_b = element.getFileName()) === null || _b === void 0 ? void 0 : _b.includes('logger.js'))) {
            const fileName = element.getFileName();
            fileMeta = `${fileName.substring(fileName.indexOf('javascript-opensdk'))}:${element.getLineNumber()}`;
            return false;
        }
        return true;
    });
    return `${msg.timestamp} [${msg.level}] (${fileMeta}): ${msg.message}`;
});
const logger = winston_1.createLogger({
    transports: [
        new winston_1.transports.Console({
            level: 'warn',
            format: winston_1.format.combine(winston_1.format((info) => {
                const newInfo = info;
                newInfo.level = info.level.toUpperCase().padEnd(7, ' ');
                return newInfo;
            })(), winston_1.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }), winston_1.format.colorize({ all: true }), customFormat),
        }),
    ],
});
exports.default = logger;
