"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const exceptions_1 = __importDefault(require("../exceptions"));
const reportType_1 = __importDefault(require("../../enums/reportType"));
const customCapabilities_1 = __importDefault(require("../internal/helpers/customCapabilities"));
class BaseBuilder {
    constructor() {
        this.typedSelf = this;
        this.seleniumBuilder = new selenium_webdriver_1.Builder();
    }
    forBrowser(name, opt_version, opt_platform) {
        this.seleniumBuilder.forBrowser(name, opt_version, opt_platform);
        return this.typedSelf;
    }
    withCapabilities(capabilities) {
        this.seleniumBuilder.withCapabilities(capabilities);
        return this.typedSelf;
    }
    withToken(token) {
        this.token = token;
        return this.typedSelf;
    }
    withRemoteAgent(remoteAgent) {
        this.remoteAgent = remoteAgent;
        return this.typedSelf;
    }
    withProjectName(projectName) {
        const trimedName = projectName.trim();
        if (!trimedName) {
            throw new exceptions_1.default.InvalidArgumentException('When using withProjectName method you must pass a value');
        }
        this.projectName = trimedName;
        return this.typedSelf;
    }
    withJobName(jobName) {
        const trimedName = jobName.trim();
        if (!trimedName) {
            throw new exceptions_1.default.InvalidArgumentException('When using withJobName method you must pass a value');
        }
        this.jobName = trimedName;
        return this.typedSelf;
    }
    withReportType(reportType) {
        this.reportType = reportType;
        return this.typedSelf;
    }
    withReportName(reportName) {
        this.reportName = reportName;
        return this.typedSelf;
    }
    withReportPath(reportPath) {
        this.reportPath = reportPath;
        return this.typedSelf;
    }
    setDisableReporting(disableReporting) {
        this.disableReporting = disableReporting;
        return this.typedSelf;
    }
    disableEnvironmentOverrides() {
        this.seleniumBuilder.disableEnvironmentOverrides();
        return this.typedSelf;
    }
    setChromeOptions(options) {
        this.chromeOptions = options;
        this.seleniumBuilder.setChromeOptions(options);
        return this.typedSelf;
    }
    setEnableNativeEvents(enabled) {
        this.seleniumBuilder.setEnableNativeEvents(enabled);
        return this.typedSelf;
    }
    setSafariOptions(options) {
        this.seleniumBuilder.setSafariOptions(options);
        return this.typedSelf;
    }
    setScrollBehavior(behavior) {
        this.seleniumBuilder.setScrollBehavior(behavior);
        return this.typedSelf;
    }
    addTestProjectCapabilities() {
        const capabilities = this.seleniumBuilder.getCapabilities();
        const setTPCapability = (cap, value) => {
            if (value) {
                capabilities.set(cap, value);
            }
        };
        setTPCapability(customCapabilities_1.default.DEVELOPMENT_TOKEN, this.token);
        setTPCapability(customCapabilities_1.default.REMOTE_AGENT_ADDRESS, this.remoteAgent);
        setTPCapability(customCapabilities_1.default.PROJECT_NAME, this.projectName);
        setTPCapability(customCapabilities_1.default.JOB_NAME, this.jobName);
        setTPCapability(customCapabilities_1.default.DISABLE_REPORTS, this.disableReporting);
        setTPCapability(customCapabilities_1.default.REPORT_TYPE, this.reportType ? reportType_1.default[this.reportType] : reportType_1.default.CLOUD_AND_LOCAL);
        setTPCapability(customCapabilities_1.default.REPORT_NAME, this.reportName);
        setTPCapability(customCapabilities_1.default.REPORT_PATH, this.reportPath);
        this.seleniumBuilder.withCapabilities(capabilities);
    }
}
exports.default = BaseBuilder;
BaseBuilder.DEFAULT_IMPLICIT_TIMEOUT = 15000;
