"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const seleniumHelper_1 = require("../../../internal/helpers/seleniumHelper");
class MobileElement {
    constructor(driverClient, commandsReporter, using, value, id) {
        this.driverClient = driverClient;
        this.commandsReporter = commandsReporter;
        this.using = using;
        this.value = value;
        this.id = id;
    }
    isEnabled() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.IS_ELEMENT_ENABLED, this.id, this.driverClient.isElementEnabled.bind(this.driverClient, this.id));
        });
    }
    takeScreenshot(scroll) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.SCREENSHOT, this.id, this.driverClient.takeElementScreenshot.bind(this.driverClient, this.id, scroll));
        });
    }
    isSelected() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.IS_ELEMENT_SELECTED, this.id, this.driverClient.isElementSelected.bind(this.driverClient, this.id));
        });
    }
    isDisplayed() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.IS_ELEMENT_DISPLAYED, this.id, this.driverClient.isElementDisplayed.bind(this.driverClient, this.id));
        });
    }
    getAttribute(attr) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_ATTRIBUTE, this.id, this.driverClient.getElementAttribute.bind(this.driverClient, this.id, attr));
        });
    }
    getText() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_TEXT, this.id, this.driverClient.getElementText.bind(this.driverClient, this.id));
        });
    }
    getTagName() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_TAG_NAME, this.id, this.driverClient.getElementTagName.bind(this.driverClient, this.id));
        });
    }
    sendKeys(value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.SEND_KEYS_TO_ELEMENT, this.id, this.driverClient.elementSendKeys.bind(this.driverClient, this.id, value));
        });
    }
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.CLEAR_ELEMENT, this.id, this.driverClient.elementClear.bind(this.driverClient, this.id));
        });
    }
    getCSSValue(propertyName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_VALUE_OF_CSS_PROPERTY, this.id, this.driverClient.getElementCSSValue.bind(this.driverClient, this.id, propertyName));
        });
    }
    getRect() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_VALUE_OF_CSS_PROPERTY, this.id, this.driverClient.getElementRect.bind(this.driverClient, this.id));
        });
    }
    click() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.commandsReporter.reportElementCommandWrapper(seleniumHelper_1.SeleniumCommandName.CLICK_ELEMENT, this.id, this.driverClient.elementClick.bind(this.driverClient, this.id));
        });
    }
}
exports.default = MobileElement;
