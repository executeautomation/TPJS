"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const logger_1 = __importDefault(require("../../../logger/logger"));
const mobileDriver_1 = __importDefault(require("./base/mobileDriver"));
const iosCSSLocatorConverter_1 = __importDefault(require("../../internal/helpers/mobile/iosCSSLocatorConverter"));
class IOSDriver extends mobileDriver_1.default {
    static createSession(caps) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!caps.has('app') && !caps.has('bundleId')) {
                throw new Error('Both "app" and "bundleId" capabilities are missing!');
            }
            caps.set('platformName', 'iOS');
            return IOSDriver.createMobileSession(caps);
        });
    }
    shake() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.shake();
        });
    }
    rotateDevice(x, y, radius, rotation, touchCount, duration, element) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.rotateDevice(x, y, radius, rotation, touchCount, duration, element);
        });
    }
    touchId(match) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.touchId(match);
        });
    }
    toggleEnrollTouchId(enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleEnrollTouchId(enabled);
        });
    }
    findElement(locator) {
        const _super = Object.create(null, {
            findElementUsing: { get: () => super.findElementUsing }
        });
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.driverClient) {
                throw new selenium_webdriver_1.error.SessionNotCreatedError('Driver not initialized!');
            }
            const locatorPrivate = locator;
            if (locatorPrivate.using === 'css selector') {
                const iosClassChainSelector = iosCSSLocatorConverter_1.default(locatorPrivate.value);
                logger_1.default.debug(`iosClassChainSelector = ${iosClassChainSelector}`);
                const locatorIdRegex = /\[`name == "(.*)"`\]/g;
                const locatorIdMatch = locatorIdRegex.exec(iosClassChainSelector);
                if (locatorIdMatch && locatorIdMatch[1]) {
                    locatorPrivate.using = 'id';
                    locatorPrivate.value = locatorIdMatch[1];
                }
                else {
                    locatorPrivate.using = '-ios class chain';
                    locatorPrivate.value = iosClassChainSelector;
                }
            }
            return _super.findElementUsing.call(this, locatorPrivate.using, locatorPrivate.value);
        });
    }
}
exports.default = IOSDriver;
