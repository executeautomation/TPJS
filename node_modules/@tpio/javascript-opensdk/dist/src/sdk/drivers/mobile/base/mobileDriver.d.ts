import { By, Capabilities } from 'selenium-webdriver';
import { Client } from 'webdriver';
import { ProtocolCommandResponse, StringsReturn } from '@wdio/protocols/build/types';
import IReportingDriver from '../../interfaces/reportingDriver';
import Reporter from '../../../reporter/reporter';
import AgentClient from '../../../internal/agent/agentClient';
import SessionResponse from '../../../../rest/messages/sessionResponse';
import MobileCommandsReporter from '../../../internal/helpers/mobileCommandsReporter';
import MobileElement from './mobileElement';
export default abstract class MobileDriver implements IReportingDriver {
    protected agentClient: AgentClient;
    protected commandsReporter: MobileCommandsReporter;
    protected reporter: Reporter;
    protected driverClient: Client;
    constructor(sessionResponse: SessionResponse, agentClient: AgentClient);
    protected static createMobileSession<T extends MobileDriver>(this: {
        new (sessionResponse: SessionResponse, agentClient: AgentClient): T;
    }, caps: Capabilities): Promise<T>;
    quit(): Promise<void>;
    report(): Reporter;
    resetApp(): Promise<void>;
    launchApp(): Promise<void>;
    backgroundApp(seconds: number | null): Promise<void>;
    getAppStrings(language?: string, stringFile?: string): Promise<StringsReturn>;
    setValueImmediate(elementId: string, value: string): Promise<void>;
    touchPerform(actions: object[]): Promise<void>;
    multiTouchPerform(actions: object[]): Promise<void>;
    getEvents(type: string[]): Promise<ProtocolCommandResponse>;
    logEvent(vendor: string, event: string): Promise<void>;
    hideKeyboard(): Promise<void>;
    getDeviceTime(): Promise<string>;
    appState(appId?: string, bundleId?: string): Promise<number>;
    isAppInstalled(appId?: string, bundleId?: string): Promise<boolean>;
    terminateApp(appId?: string, bundleId?: string): Promise<void>;
    getPerformanceData(packageName: string, dataType: string, dataReadTimeout?: number): Promise<string[]>;
    getPerformanceDataTypes(): Promise<string[]>;
    activateApp(appId?: string, bundleId?: string): Promise<void>;
    installApp(appPath: string): Promise<void>;
    removeApp(appId?: string, bundleId?: string): Promise<void>;
    closeApp(): Promise<void>;
    lock(seconds?: number): Promise<void>;
    startRecordingScreen(options?: object): Promise<void>;
    stopRecordingScreen(remotePath?: string, username?: string, password?: string, method?: string): Promise<string>;
    systemTime(): Promise<string>;
    pullFile(path: string): Promise<string>;
    takeScreenshot(): Promise<string>;
    findElementUsing(using: string, value: string): Promise<MobileElement>;
    abstract findElement(locator: By): Promise<MobileElement>;
}
