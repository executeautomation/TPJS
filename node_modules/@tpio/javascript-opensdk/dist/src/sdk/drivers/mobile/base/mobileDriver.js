"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webdriver_1 = __importDefault(require("webdriver"));
const logger_1 = __importDefault(require("../../../../logger/logger"));
const reporter_1 = __importDefault(require("../../../reporter/reporter"));
const agentClient_1 = __importDefault(require("../../../internal/agent/agentClient"));
const mobileCommandsReporter_1 = __importDefault(require("../../../internal/helpers/mobileCommandsReporter"));
const mobileElement_1 = __importDefault(require("./mobileElement"));
class MobileDriver {
    constructor(sessionResponse, agentClient) {
        this.agentClient = agentClient;
        this.reporter = new reporter_1.default(this.agentClient, this.takeScreenshot.bind(this));
        this.commandsReporter = new mobileCommandsReporter_1.default(this.agentClient, this.reporter);
        const url = new URL(sessionResponse.serverAddress);
        this.driverClient = webdriver_1.default.attachToSession({
            sessionId: sessionResponse.sessionId,
            hostname: url.hostname,
            port: parseInt(url.port, 10),
            path: url.pathname,
            protocol: url.protocol.slice(0, -1),
            isW3C: sessionResponse.dialect === 'W3C',
            isMobile: true,
            logLevel: 'warn',
        }, undefined, undefined, this.commandsReporter.reportDriverCommandWrapper.bind(this.commandsReporter));
        this.commandsReporter.setDriverClient(this.driverClient);
    }
    static createMobileSession(caps) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!caps.has('udid')) {
                throw new Error('Mandatory "udid" capability is missing!');
            }
            if (!caps.has('browserName')) {
                caps.set('browserName', '');
            }
            const agentClient = new agentClient_1.default(caps);
            const sessionResponse = yield agentClient.startSession();
            logger_1.default.debug(`Start session response:\n${JSON.stringify(sessionResponse, null, 2)}`);
            const mobileDriver = new this(sessionResponse, agentClient);
            yield mobileDriver.driverClient.setImplicitTimeout(15000);
            return mobileDriver;
        });
    }
    quit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.commandsReporter.reportTest(true);
            yield this.agentClient.quitSession();
        });
    }
    report() {
        return this.reporter;
    }
    resetApp() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.reset();
        });
    }
    launchApp() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.driverClient.launchApp();
        });
    }
    backgroundApp(seconds) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.background(seconds);
        });
    }
    getAppStrings(language, stringFile) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getStrings(language, stringFile);
        });
    }
    setValueImmediate(elementId, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.setValueImmediate(elementId, value);
        });
    }
    touchPerform(actions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.touchPerform(actions);
        });
    }
    multiTouchPerform(actions) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.multiTouchPerform(actions);
        });
    }
    getEvents(type) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getEvents(type);
        });
    }
    logEvent(vendor, event) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.logEvent(vendor, event);
        });
    }
    hideKeyboard() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.driverClient.hideKeyboard();
        });
    }
    getDeviceTime() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getDeviceTime();
        });
    }
    appState(appId, bundleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.queryAppState(appId, bundleId);
        });
    }
    isAppInstalled(appId, bundleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.isAppInstalled(appId, bundleId);
        });
    }
    terminateApp(appId, bundleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.terminateApp(appId, bundleId);
        });
    }
    getPerformanceData(packageName, dataType, dataReadTimeout) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getPerformanceData(packageName, dataType, dataReadTimeout);
        });
    }
    getPerformanceDataTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getPerformanceDataTypes();
        });
    }
    activateApp(appId, bundleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.activateApp(appId, bundleId);
        });
    }
    installApp(appPath) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.installApp(appPath);
        });
    }
    removeApp(appId, bundleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.removeApp(appId, bundleId);
        });
    }
    closeApp() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.closeApp();
        });
    }
    lock(seconds) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.lock(seconds);
        });
    }
    startRecordingScreen(options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.startRecordingScreen(options);
        });
    }
    stopRecordingScreen(remotePath, username, password, method) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.stopRecordingScreen(remotePath, username, password, method);
        });
    }
    systemTime() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getDeviceTime();
        });
    }
    pullFile(path) {
        return this.driverClient.pullFile(path);
    }
    takeScreenshot() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.takeScreenshot();
        });
    }
    findElementUsing(using, value) {
        return __awaiter(this, void 0, void 0, function* () {
            const elementRef = yield this.driverClient.findElement(using, value);
            return new mobileElement_1.default(this.driverClient, this.commandsReporter, using, value, elementRef['element-6066-11e4-a52e-4f735466cecf']);
        });
    }
}
exports.default = MobileDriver;
