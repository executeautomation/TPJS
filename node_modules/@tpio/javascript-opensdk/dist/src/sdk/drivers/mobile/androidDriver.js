"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../../../logger/logger"));
const androidCSSLocatorConverter_1 = __importDefault(require("../../internal/helpers/mobile/androidCSSLocatorConverter"));
const mobileDriver_1 = __importDefault(require("./base/mobileDriver"));
class AndroidDriver extends mobileDriver_1.default {
    static createSession(caps) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!caps.has('app') && !(caps.has('appPackage') && caps.has('appActivity'))) {
                throw new Error('Mandatory "app" or "appPackage"/"appActivity" capabilities are missing!');
            }
            caps.set('platformName', 'Android');
            return AndroidDriver.createMobileSession(caps);
        });
    }
    startActivity(appPackage, appActivity, appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags, optionalIntentArguments, dontStopAppOnReset) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.startActivity(appPackage, appActivity, appWaitPackage, appWaitActivity, intentAction, intentCategory, intentFlags, optionalIntentArguments, dontStopAppOnReset);
        });
    }
    getCurrentPackage() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getCurrentPackage();
        });
    }
    getCurrentActivity() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getCurrentActivity();
        });
    }
    isLocked() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.isLocked();
        });
    }
    unlock() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.unlock();
        });
    }
    pressKeyCode(keycode, metastate, flags) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.pressKeyCode(keycode, metastate, flags);
        });
    }
    longPressKeyCode(keycode, metastate, flags) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.longPressKeyCode(keycode, metastate, flags);
        });
    }
    toggleAirplaneMode() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleAirplaneMode();
        });
    }
    replaceValue(elementId, value) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.replaceValue(elementId, value);
        });
    }
    pushFile(path, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.pushFile(path, data);
        });
    }
    fingerPrint(fingerprintId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.fingerPrint(fingerprintId);
        });
    }
    isKeyboardShown() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.isKeyboardShown();
        });
    }
    getDisplayDensity() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getDisplayDensity();
        });
    }
    toggleNetworkSpeed() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleNetworkSpeed();
        });
    }
    openNotifications() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.openNotifications();
        });
    }
    endCoverage(intent, path) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.endCoverage(intent, path);
        });
    }
    gsmCall(phoneNumber, action) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.gsmCall(phoneNumber, action);
        });
    }
    gsmSignal(signalStrength, signalStrengh) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.gsmSignal(signalStrength, signalStrengh);
        });
    }
    gsmVoice(state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.gsmVoice(state);
        });
    }
    powerCapacity(percent) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.powerCapacity(percent);
        });
    }
    sendSms(phoneNumber, message) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.sendSms(phoneNumber, message);
        });
    }
    powerAC(state) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.powerAC(state);
        });
    }
    getSystemBars() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.getSystemBars();
        });
    }
    toggleLocationServices() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleLocationServices();
        });
    }
    toggleWiFi() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleWiFi();
        });
    }
    toggleData() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.driverClient.toggleData();
        });
    }
    findElement(locator) {
        const _super = Object.create(null, {
            findElementUsing: { get: () => super.findElementUsing }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const locatorPrivate = locator;
            if (locatorPrivate.using === 'css selector') {
                const uiAutomatorSelector = androidCSSLocatorConverter_1.default(locatorPrivate.value);
                logger_1.default.debug(`uiAutomatorSelector = ${uiAutomatorSelector}`);
                const locatorIdRegex = /new UiSelector\(\).resourceId\("android:id\/(.+)"\)/g;
                const locatorIdMatch = locatorIdRegex.exec(uiAutomatorSelector);
                if (locatorIdMatch && locatorIdMatch[1]) {
                    locatorPrivate.using = 'id';
                    locatorPrivate.value = locatorIdMatch[1];
                }
                else {
                    locatorPrivate.using = '-android uiautomator';
                    locatorPrivate.value = uiAutomatorSelector;
                }
            }
            return _super.findElementUsing.call(this, locatorPrivate.using, locatorPrivate.value);
        });
    }
}
exports.default = AndroidDriver;
