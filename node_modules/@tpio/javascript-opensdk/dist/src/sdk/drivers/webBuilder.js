"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const baseBuilder_1 = __importDefault(require("./baseBuilder"));
const thenableBaseDriver_1 = require("./web/base/thenableBaseDriver");
const firefox_1 = __importDefault(require("./web/firefox"));
const chrome_1 = __importDefault(require("./web/chrome"));
const edge_1 = __importDefault(require("./web/edge"));
const ie_1 = __importDefault(require("./web/ie"));
const safari_1 = __importDefault(require("./web/safari"));
class Builder extends baseBuilder_1.default {
    setAlertBehavior(behavior) {
        this.seleniumBuilder.setAlertBehavior(behavior);
        return this;
    }
    setControlFlow(flow) {
        this.seleniumBuilder.setControlFlow(flow);
        return this;
    }
    setEdgeOptions(options) {
        this.seleniumBuilder.setEdgeOptions(options);
        return this;
    }
    setFirefoxOptions(options) {
        this.seleniumBuilder.setFirefoxOptions(options);
        return this;
    }
    setIeOptions(options) {
        this.seleniumBuilder.setIeOptions(options);
        return this;
    }
    setLoggingPrefs(prefs) {
        this.seleniumBuilder.setLoggingPrefs(prefs);
        return this;
    }
    setProxy(config) {
        this.seleniumBuilder.setProxy(config);
        return this;
    }
    build() {
        var _a;
        this.addTestProjectCapabilities();
        const capabilities = this.seleniumBuilder.getCapabilities();
        const browser = capabilities.get(selenium_webdriver_1.Capability.BROWSER_NAME);
        if (typeof browser !== 'string') {
            throw TypeError(`Target browser must be a string, but is <${typeof browser}>; did you forget to call forBrowser()?`);
        }
        let driver;
        switch (browser) {
            case selenium_webdriver_1.Browser.CHROME:
                capabilities.set('goog:chromeOptions', (_a = this.chromeOptions) === null || _a === void 0 ? void 0 : _a.options_);
                if (this.chromeOptions) {
                    capabilities.merge(this.chromeOptions.toCapabilities());
                }
                driver = thenableBaseDriver_1.createDriver(chrome_1.default, capabilities);
                break;
            case selenium_webdriver_1.Browser.FIREFOX:
                if (this.seleniumBuilder.getFirefoxOptions()) {
                    capabilities.merge(this.seleniumBuilder.getFirefoxOptions().toCapabilities());
                }
                driver = thenableBaseDriver_1.createDriver(firefox_1.default, capabilities);
                break;
            case selenium_webdriver_1.Browser.IE:
                driver = thenableBaseDriver_1.createDriver(ie_1.default, capabilities);
                break;
            case selenium_webdriver_1.Browser.EDGE:
                driver = thenableBaseDriver_1.createDriver(edge_1.default, capabilities);
                break;
            case selenium_webdriver_1.Browser.SAFARI:
                if (this.seleniumBuilder.getSafariOptions()) {
                    capabilities.merge(this.seleniumBuilder.getSafariOptions().toCapabilities());
                }
                driver = thenableBaseDriver_1.createDriver(safari_1.default, capabilities);
                break;
            default:
                throw new Error(`Do not know how to build driver: ${browser}`);
        }
        driver.manage().timeouts().implicitlyWait(baseBuilder_1.default.DEFAULT_IMPLICIT_TIMEOUT);
        return driver;
    }
}
exports.default = Builder;
