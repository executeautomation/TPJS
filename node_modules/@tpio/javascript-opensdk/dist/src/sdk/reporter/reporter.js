"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../../logger/logger"));
const customTestReport_1 = __importDefault(require("../../rest/messages/customTestReport"));
const stepReport_1 = __importDefault(require("../../rest/messages/stepReport"));
const reportHelper_1 = __importDefault(require("../internal/helpers/reportHelper"));
class Reporter {
    constructor(agentClient, getScreenshot) {
        this.agentClient = agentClient;
        this.getScreenshot = getScreenshot;
        this.disableReports = false;
        this.disableCommandReports = false;
        this.disableTestAutoReports = false;
        const disableAutoReports = process.env.TP_DISABLE_AUTO_REPORTS;
        if (disableAutoReports && disableAutoReports.toLowerCase() === 'true') {
            this.disableTestAutoReports = true;
            this.disableCommandReports = true;
        }
    }
    step(description, message, passed, screenshot) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.disableReports) {
                logger_1.default.debug(`Step ${description} ${passed ? 'passed' : 'failed'}`);
                return;
            }
            let screenshotData;
            if (screenshot) {
                try {
                    this.disableCommandReports = true;
                    screenshotData = yield this.getScreenshot();
                }
                finally {
                    this.disableCommandReports = false;
                }
            }
            const stepReport = new stepReport_1.default(description, message, passed, screenshotData);
            this.agentClient.reportStep(stepReport);
        });
    }
    test(name, passed = true, message) {
        if (!this.disableReports) {
            const testName = name !== null && name !== void 0 ? name : reportHelper_1.default.inferTestName();
            const testReport = new customTestReport_1.default(testName, passed, message);
            this.agentClient.reportTest(testReport);
        }
    }
}
exports.default = Reporter;
