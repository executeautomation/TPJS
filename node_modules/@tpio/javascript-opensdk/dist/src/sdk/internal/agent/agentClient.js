"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const selenium_webdriver_1 = require("selenium-webdriver");
const async_1 = __importDefault(require("async"));
const axios_1 = __importDefault(require("axios"));
const url_parse_1 = __importDefault(require("url-parse"));
const reportSettings_1 = __importDefault(require("../../../rest/reportSettings"));
const agentSession_1 = __importDefault(require("../session/agentSession"));
const sessionRequest_1 = __importDefault(require("../../../rest/messages/sessionRequest"));
const sessionResponse_1 = __importDefault(require("../../../rest/messages/sessionResponse"));
const configHelper_1 = __importDefault(require("../helpers/configHelper"));
const socketManager_1 = __importDefault(require("../../../tcp/socketManager"));
const customCapabilities_1 = __importDefault(require("../helpers/customCapabilities"));
const queueItem_1 = __importDefault(require("../../../classes/queueItem"));
const agentClientRest_1 = __importDefault(require("./agentClientRest"));
const logger_1 = __importDefault(require("../../../logger/logger"));
const reportHelper_1 = __importDefault(require("../helpers/reportHelper"));
class AgentClient {
    constructor(caps) {
        this.capabilities = caps;
        this.token = caps.get(customCapabilities_1.default.DEVELOPMENT_TOKEN);
        if (caps.has(customCapabilities_1.default.DEVELOPMENT_TOKEN)) {
            this.token = caps.get(customCapabilities_1.default.DEVELOPMENT_TOKEN);
        }
        else {
            this.token = configHelper_1.default.developerToken();
        }
        if (caps.has(customCapabilities_1.default.REMOTE_AGENT_ADDRESS)) {
            this.remoteAddress = caps.get(customCapabilities_1.default.REMOTE_AGENT_ADDRESS);
        }
        else {
            this.remoteAddress = configHelper_1.default.agentServiceAddress();
        }
        this.reportSettings = new reportSettings_1.default(caps.get(customCapabilities_1.default.PROJECT_NAME) || reportHelper_1.default.inferProjectName(), caps.get(customCapabilities_1.default.JOB_NAME) || reportHelper_1.default.inferJobName(), caps.get(customCapabilities_1.default.REPORT_TYPE) || '', caps.get(customCapabilities_1.default.REPORT_NAME) || '', caps.get(customCapabilities_1.default.REPORT_PATH) || '');
        this.asyncReportingQueue = async_1.default.queue((task, callback) => __awaiter(this, void 0, void 0, function* () {
            let jsonString = JSON.stringify(task.reportAsJson);
            if (jsonString.length > 256) {
                jsonString = `${jsonString.substring(0, 256)}...`;
            }
            logger_1.default.debug(`Sending POST to Agent: ${task.endPoint}\n${jsonString}`);
            const response = yield agentClientRest_1.default.Post(task.url, task.reportAsJson, this.token);
            if (!response.passed) {
                callback(Error(response.message));
            }
            else {
                callback();
            }
        }), 1);
    }
    startSession() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const sessionRequest = new sessionRequest_1.default(this.reportSettings, this.capabilities).toObject();
                const agentUrl = `${this.remoteAddress}${"/api/development/session"}`;
                const response = yield axios_1.default
                    .post(agentUrl, sessionRequest, { headers: { Authorization: this.token } })
                    .catch((error) => {
                    let errMsg = error.message;
                    if (error.response) {
                        errMsg += `: ${error.response.data.message}`;
                    }
                    if (error.code === 'ECONNREFUSED') {
                        errMsg = `
            Failed connecting to the TestProject Agent at ${this.remoteAddress}.
            Please make sure that the TestProject Agent is running and try again.`;
                    }
                    logger_1.default.error(errMsg);
                    throw new selenium_webdriver_1.error.SessionNotCreatedError(errMsg);
                });
                const sessionResponse = Object.assign(new sessionResponse_1.default(), response.data);
                this.agentVersion = sessionResponse.agentVersion;
                this.agentSession = new agentSession_1.default(sessionResponse.serverAddress, sessionResponse.sessionId, sessionResponse.dialect, sessionResponse.capabilities);
                socketManager_1.default.instance().openSocket(url_parse_1.default(this.remoteAddress).hostname, sessionResponse.devSocketPort);
                logger_1.default.debug(`Development session ${sessionResponse.sessionId} started...`);
                return sessionResponse;
            }
            catch (error) {
                throw new selenium_webdriver_1.error.SessionNotCreatedError(error);
            }
        });
    }
    quitSession() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = this.asyncReportingQueue) === null || _a === void 0 ? void 0 : _a.length()) || ((_b = this.asyncReportingQueue) === null || _b === void 0 ? void 0 : _b.running())) {
                logger_1.default.debug('Waiting for the reporting queue to drain...');
                yield ((_c = this.asyncReportingQueue) === null || _c === void 0 ? void 0 : _c.drain());
            }
            logger_1.default.debug('Closing the development session');
            socketManager_1.default.instance().closeSocket();
        });
    }
    reportTest(testReport) {
        var _a;
        const path = `${this.remoteAddress}${"/api/development/report/test"}`;
        const queueItem = new queueItem_1.default(testReport.toJson(), path, this.token, "/api/development/report/test");
        (_a = this.asyncReportingQueue) === null || _a === void 0 ? void 0 : _a.push(queueItem);
    }
    reportStep(stepReport) {
        var _a;
        const path = `${this.remoteAddress}${"/api/development/report/step"}`;
        const queueItem = new queueItem_1.default(stepReport.toJson(), path, this.token, "/api/development/report/step");
        (_a = this.asyncReportingQueue) === null || _a === void 0 ? void 0 : _a.push(queueItem);
    }
    reportDriverCommand(driverCommandReport) {
        var _a;
        const path = `${this.remoteAddress}${"/api/development/report/command"}`;
        const queueItem = new queueItem_1.default(driverCommandReport.ToJson(), path, this.token, "/api/development/report/command");
        (_a = this.asyncReportingQueue) === null || _a === void 0 ? void 0 : _a.push(queueItem);
    }
}
exports.default = AgentClient;
