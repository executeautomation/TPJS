"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const stack_trace_1 = require("stack-trace");
const logger_1 = __importDefault(require("../../../logger/logger"));
const detectMocha = require('detect-mocha');
require('../mochaHooks');
class ReportHelper {
    static inferTestName() {
        var _a;
        const { TP_TEST_NAME, MOCHA_IT } = process.env;
        return (_a = TP_TEST_NAME !== null && TP_TEST_NAME !== void 0 ? TP_TEST_NAME : MOCHA_IT) !== null && _a !== void 0 ? _a : 'Unnamed Test';
    }
    static inferProjectName() {
        var _a;
        const { TP_PROJECT_NAME } = process.env;
        if (TP_PROJECT_NAME) {
            return TP_PROJECT_NAME;
        }
        let result = 'Unnamed Project';
        if (detectMocha()) {
            const callStackList = stack_trace_1.get();
            for (const file of callStackList) {
                if ((_a = file === null || file === void 0 ? void 0 : file.getFileName()) === null || _a === void 0 ? void 0 : _a.includes('.spec')) {
                    const fileName = file === null || file === void 0 ? void 0 : file.getFileName().match(/tests.*/);
                    if (fileName && fileName[0]) {
                        const removeFileNameRegex = fileName[0].slice(0, fileName[0].lastIndexOf(path_1.default.sep));
                        const seperator = os_1.default.platform() === 'win32' ? path_1.default.sep + path_1.default.sep : path_1.default.sep;
                        result = removeFileNameRegex.replace(new RegExp(seperator, 'g'), '.');
                        break;
                    }
                }
            }
        }
        else {
        }
        return result;
    }
    static inferJobName() {
        var _a;
        const { TP_JOB_NAME, MOCHA_DESCRIBE_TREE } = process.env;
        if (TP_JOB_NAME) {
            return TP_JOB_NAME;
        }
        if (MOCHA_DESCRIBE_TREE) {
            return MOCHA_DESCRIBE_TREE;
        }
        let result = 'Unnamed Job';
        if (detectMocha()) {
            logger_1.default.debug('Attempting to infer job name using inspect.stack()');
            logger_1.default.debug("Inferred job name '{result}' from inspect.stack()");
            const callStackList = stack_trace_1.get();
            for (const file of callStackList) {
                if ((_a = file === null || file === void 0 ? void 0 : file.getFileName()) === null || _a === void 0 ? void 0 : _a.includes('.spec')) {
                    const fileName = file === null || file === void 0 ? void 0 : file.getFileName();
                    const editFileName = fileName.replace(/^.*[\\/]/, '');
                    result = editFileName.replace('.spec.js', '');
                    return result;
                }
            }
        }
        return result;
    }
}
exports.default = ReportHelper;
