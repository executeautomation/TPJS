"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const seleniumHelper_1 = require("./seleniumHelper");
class RedactHelper {
    constructor(customCommandExecutor) {
        this.customCommandExecutor = customCommandExecutor;
    }
    redactCommand(command) {
        return __awaiter(this, void 0, void 0, function* () {
            const commandName = command.getName();
            if (commandName === seleniumHelper_1.SeleniumCommandName.SEND_KEYS_TO_ELEMENT ||
                commandName === seleniumHelper_1.SeleniumCommandName.SEND_KEYS_TO_ACTIVE_ELEMENT) {
                const elementId = (yield command.getParameter('id'));
                if (!elementId) {
                    return command.getParameters();
                }
                const redactionRequired = yield this.redactionRequired(elementId);
                if (!redactionRequired) {
                    return command.getParameters();
                }
                command.setParameter('text', '***');
                command.setParameter('value', ['*', '*', '*']);
            }
            return command.getParameters();
        });
    }
    redactionRequired(elementId) {
        return __awaiter(this, void 0, void 0, function* () {
            const platformName = this.customCommandExecutor.agentClient.capabilities.get('platformName');
            const browserName = this.customCommandExecutor.agentClient.capabilities.get('browserName');
            if (platformName === 'android') {
                if (!browserName) {
                    return this.isAndroidPasswordElement(elementId);
                }
            }
            const isSecured = yield this.isSecuredElement(elementId);
            return isSecured;
        });
    }
    isAndroidPasswordElement(elementId) {
        return __awaiter(this, void 0, void 0, function* () {
            const newCommand = seleniumHelper_1.SeleniumHelper.buildSeleniumCommand(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_ATTRIBUTE)
                .setParameter('id', elementId)
                .setParameter('sessionId', this.customCommandExecutor.sessionId)
                .setParameter('name', 'password');
            const getAttributeResponse = yield this.customCommandExecutor.execute(newCommand, true);
            return getAttributeResponse && getAttributeResponse instanceof String
                ? getAttributeResponse.toLowerCase() === 'true'
                : false;
        });
    }
    isSecuredElement(elementId) {
        return __awaiter(this, void 0, void 0, function* () {
            const command = seleniumHelper_1.SeleniumHelper.buildSeleniumCommand(seleniumHelper_1.SeleniumCommandName.GET_ELEMENT_ATTRIBUTE)
                .setParameter('sessionId', this.customCommandExecutor.sessionId)
                .setParameter('id', elementId)
                .setParameter('name', 'type');
            const getAttributeResponse = yield this.customCommandExecutor.execute(command, true);
            return getAttributeResponse
                ? ['password', 'XCUIElementTypeSecureTextField'].indexOf(getAttributeResponse) >= 0
                : false;
        });
    }
}
exports.default = RedactHelper;
