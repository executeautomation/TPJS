"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeleniumHelper = exports.SeleniumCommandName = void 0;
const elementSearchCriteria_1 = __importDefault(require("../../../classes/elementSearchCriteria"));
const exceptions_1 = __importDefault(require("../../exceptions"));
const SeleniumCommandNamespace = require('selenium-webdriver/lib/command.js');
exports.SeleniumCommandName = SeleniumCommandNamespace.Name;
class SeleniumHelper {
    static create_search_criteria(by, byValue) {
        if (by === "id") {
            return new elementSearchCriteria_1.default(0, byValue);
        }
        if (by === "name") {
            return new elementSearchCriteria_1.default(1, byValue);
        }
        if (by === "xpath") {
            return new elementSearchCriteria_1.default(7, byValue);
        }
        if (by === "class name") {
            return new elementSearchCriteria_1.default(2, byValue);
        }
        if (by === "css selector") {
            return new elementSearchCriteria_1.default(3, byValue);
        }
        if (by === "link text") {
            return new elementSearchCriteria_1.default(4, byValue);
        }
        if (by === "tag name") {
            return new elementSearchCriteria_1.default(6, byValue);
        }
        if (by === "partial link text") {
            return new elementSearchCriteria_1.default(5, byValue);
        }
        throw new exceptions_1.default.SdkException(`Unsupported locator strategy: ${by || 'undefined'}`);
    }
    static create_addon_locator(by, byValue) {
        if (by === "id") {
            return { id: byValue };
        }
        if (by === "name") {
            return { name: byValue };
        }
        if (by === "xpath") {
            return { xpath: byValue };
        }
        if (by === "class name") {
            return { className: byValue };
        }
        if (by === "css selector") {
            return { cssSelector: byValue };
        }
        if (by === "link text") {
            return { linkText: byValue };
        }
        if (by === "tag name") {
            return { tagName: byValue };
        }
        if (by === "partial link text") {
            return { partialLinkText: byValue };
        }
        throw new exceptions_1.default.SdkException(`Unsupported locator strategy: ${by}`);
    }
    static buildSeleniumCommand(cmdName) {
        return new SeleniumCommandNamespace.Command(cmdName);
    }
}
exports.SeleniumHelper = SeleniumHelper;
